import time
import uuid

class SessionManager:
    def __init__(self, expiry_seconds=60):
        # Store sessions as {session_id: (start_time, expiry_time)}
        self.sessions = {}
        self.expiry_seconds = expiry_seconds

    def create_session(self, user_id):
        """Create a new session for the user"""
        session_id = str(uuid.uuid4())  # generate unique session ID
        start_time = time.time()
        expiry_time = start_time + self.expiry_seconds
        self.sessions[session_id] = {"user_id": user_id, "expiry_time": expiry_time}
        print(f"✅ Session created for user {user_id}, session_id = {session_id}")
        return session_id

    def is_session_active(self, session_id):
        """Check if the session is still valid"""
        self.cleanup_sessions()  # remove expired sessions first
        if session_id in self.sessions:
            return True
        return False

    def cleanup_sessions(self):
        """Delete expired sessions automatically"""
        current_time = time.time()
        expired_sessions = [sid for sid, data in self.sessions.items() if data["expiry_time"] <= current_time]
        for sid in expired_sessions:
            print(f"⚠️ Session {sid} expired and removed.")
            del self.sessions[sid]

# ----------------- DEMO -----------------
if __name__ == "__main__":
    sm = SessionManager(expiry_seconds=10)  # expiry time = 10 seconds

    # Create session
    session_id = sm.create_session(user_id="user123")

    # Check session immediately
    print("Is session active?", sm.is_session_active(session_id))

    # Wait for 12 seconds (more than expiry time)
    time.sleep(12)

    # Check again after expiry
    print("Is session active?", sm.is_session_active(session_id))
